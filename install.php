<?php
/**
 * Script d'installation automatique du projet d'actualit√©s
 */

echo "=== INSTALLATION DU PROJET D'ACTUALIT√âS ===\n\n";

// V√©rification des pr√©requis
echo "1. V√©rification des pr√©requis...\n";

$requirements = [
    'php' => '7.4.0',
    'extensions' => ['soap', 'curl', 'json', 'pdo', 'pdo_mysql'],
    'composer' => true
];

// V√©rifier la version PHP
if (version_compare(PHP_VERSION, $requirements['php'], '<')) {
    die("‚ùå PHP " . $requirements['php'] . " ou sup√©rieur requis. Version actuelle: " . PHP_VERSION . "\n");
}
echo "‚úì PHP " . PHP_VERSION . " OK\n";

// V√©rifier les extensions
foreach ($requirements['extensions'] as $ext) {
    if (!extension_loaded($ext)) {
        die("‚ùå Extension PHP '$ext' manquante\n");
    }
    echo "‚úì Extension $ext OK\n";
}

// V√©rifier Composer
if (!file_exists('composer.json')) {
    die("‚ùå Fichier composer.json manquant\n");
}
echo "‚úì Composer OK\n";

echo "\n2. Installation des d√©pendances PHP...\n";
if (!file_exists('vendor/autoload.php')) {
    echo "Installation avec Composer...\n";
    system('composer install', $returnCode);
    if ($returnCode !== 0) {
        die("‚ùå Erreur lors de l'installation des d√©pendances\n");
    }
}
echo "‚úì D√©pendances install√©es\n";

echo "\n3. Configuration de la base de donn√©es...\n";

// Demander les param√®tres de base de donn√©es
echo "Param√®tres de la base de donn√©es:\n";
$host = readline("Host (localhost): ") ?: 'localhost';
$dbname = readline("Nom de la base de donn√©es (actualite_db): ") ?: 'actualite_db';
$username = readline("Nom d'utilisateur (root): ") ?: 'root';
$password = readline("Mot de passe: ");

// Tester la connexion
try {
    $dsn = "mysql:host=$host;charset=utf8mb4";
    $pdo = new PDO($dsn, $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "‚úì Connexion √† MySQL r√©ussie\n";
} catch (PDOException $e) {
    die("‚ùå Erreur de connexion √† MySQL: " . $e->getMessage() . "\n");
}

// Cr√©er la base de donn√©es
try {
    $pdo->exec("CREATE DATABASE IF NOT EXISTS `$dbname` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    echo "‚úì Base de donn√©es '$dbname' cr√©√©e\n";
} catch (PDOException $e) {
    die("‚ùå Erreur lors de la cr√©ation de la base de donn√©es: " . $e->getMessage() . "\n");
}

// Importer le sch√©ma
try {
    $schema = file_get_contents('database/schema.sql');
    if (!$schema) {
        die("‚ùå Fichier database/schema.sql manquant\n");
    }
    
    // Remplacer USE actualite_db par la base de donn√©es choisie
    $schema = str_replace('USE actualite_db;', "USE `$dbname`;", $schema);
    
    $pdo->exec("USE `$dbname`");
    $statements = explode(';', $schema);
    
    foreach ($statements as $statement) {
        $statement = trim($statement);
        if (!empty($statement)) {
            $pdo->exec($statement);
        }
    }
    echo "‚úì Sch√©ma de base de donn√©es import√©\n";
} catch (PDOException $e) {
    die("‚ùå Erreur lors de l'import du sch√©ma: " . $e->getMessage() . "\n");
}

echo "\n4. Configuration des fichiers...\n";

// Mettre √† jour la configuration de la base de donn√©es
$configContent = file_get_contents('backend/config/database.php');
if ($configContent) {
    $configContent = preg_replace(
        "/private const HOST = '[^']*';/",
        "private const HOST = '$host';",
        $configContent
    );
    $configContent = preg_replace(
        "/private const DB_NAME = '[^']*';/",
        "private const DB_NAME = '$dbname';",
        $configContent
    );
    $configContent = preg_replace(
        "/private const USERNAME = '[^']*';/",
        "private const USERNAME = '$username';",
        $configContent
    );
    $configContent = preg_replace(
        "/private const PASSWORD = '[^']*';/",
        "private const PASSWORD = '$password';",
        $configContent
    );
    
    file_put_contents('backend/config/database.php', $configContent);
    echo "‚úì Configuration de la base de donn√©es mise √† jour\n";
}

// Cr√©er le fichier .htaccess si n√©cessaire
if (!file_exists('.htaccess')) {
    $htaccess = "RewriteEngine On\n";
    $htaccess .= "RewriteCond %{REQUEST_FILENAME} !-f\n";
    $htaccess .= "RewriteCond %{REQUEST_FILENAME} !-d\n";
    $htaccess .= "RewriteRule ^(.*)$ index.php [QSA,L]\n";
    
    file_put_contents('.htaccess', $htaccess);
    echo "‚úì Fichier .htaccess cr√©√©\n";
}

echo "\n5. Test des services web...\n";

// Tester l'API REST
$restUrl = "http://localhost/projet-actualite/backend/api/rest_api.php/articles";
$context = stream_context_create([
    'http' => [
        'method' => 'GET',
        'header' => 'Accept: application/json'
    ]
]);

$response = @file_get_contents($restUrl, false, $context);
if ($response !== false) {
    $data = json_decode($response, true);
    if ($data && isset($data['success'])) {
        echo "‚úì API REST fonctionnelle\n";
    } else {
        echo "‚ö† API REST accessible mais r√©ponse inattendue\n";
    }
} else {
    echo "‚ö† Impossible de tester l'API REST (serveur web non d√©marr√©?)\n";
}

// Tester le service SOAP
$soapUrl = "http://localhost/projet-actualite/backend/api/soap_server.php?wsdl";
$soapResponse = @file_get_contents($soapUrl);
if ($soapResponse !== false && strpos($soapResponse, '<?xml') === 0) {
    echo "‚úì Service SOAP accessible\n";
} else {
    echo "‚ö† Impossible de tester le service SOAP (serveur web non d√©marr√©?)\n";
}

echo "\n6. V√©rification de l'application Java...\n";

if (file_exists('java-client/pom.xml')) {
    echo "‚úì Projet Java d√©tect√©\n";
    echo "Pour compiler l'application Java:\n";
    echo "  cd java-client\n";
    echo "  mvn clean package\n";
    echo "  java -jar target/user-management-client-1.0.0.jar\n";
} else {
    echo "‚ö† Projet Java non trouv√©\n";
}

echo "\n=== INSTALLATION TERMIN√âE ===\n\n";

echo "üéâ Le projet a √©t√© install√© avec succ√®s!\n\n";

echo "üìã Prochaines √©tapes:\n";
echo "1. D√©marrer votre serveur web (Apache/Nginx)\n";
echo "2. Acc√©der au site: http://localhost/projet-actualite/frontend/\n";
echo "3. Tester l'API REST: http://localhost/projet-actualite/backend/api/rest_api.php/articles\n";
echo "4. Tester le service SOAP: http://localhost/projet-actualite/backend/api/soap_server.php?wsdl\n\n";

echo "üîê Comptes de test:\n";
echo "- Admin: admin / password\n";
echo "- √âditeur: editeur1 / password\n";
echo "- Visiteur: user1 / password\n\n";

echo "üìö Documentation: README.md\n";
echo "üêõ Support: Consulter les logs d'erreur en cas de probl√®me\n\n";

echo "Merci d'utiliser notre projet d'architecture logicielle!\n"; 